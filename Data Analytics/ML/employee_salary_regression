# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Sample dataset (Experience in years vs Salary in USD)
data = {'Experience': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        'Salary': [30000, 35000, 40000, 45000, 50000, 60000, 65000, 70000, 75000, 80000]}

# Convert to DataFrame
df = pd.DataFrame(data)

# Split dataset into training & testing sets (80% train, 20% test)
X = df[['Experience']]  # Independent variable
y = df['Salary']        # Dependent variable
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict salaries for the test set
y_pred = model.predict(X_test)

# Print model coefficients
print(f"Intercept: {model.intercept_}")
print(f"Coefficient (Slope): {model.coef_[0]}")

# Predict salary for a specific experience level
experience_years = np.array([[7]])  # Change this value for different predictions
predicted_salary = model.predict(experience_years)
print(f"Predicted Salary for {experience_years[0][0]} years of experience: ${predicted_salary[0]:.2f}")

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Mean Squared Error (MSE): {mse:.2f}")

# Visualization
plt.scatter(X, y, color='blue', label="Actual Data")  # Scatter plot of actual data
plt.plot(X, model.predict(X), color='red', linewidth=2, label="Regression Line")  # Regression line
plt.xlabel("Years of Experience")
plt.ylabel("Salary (USD)")
plt.title("Salary Prediction Based on Experience")
plt.legend()
plt.show()
